name: Build and Test

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      build_wheels:
        description: 'Build wheels (otherwise just test)'
        type: boolean
        default: false
      upload_to_pypi:
        description: 'Upload to PyPI (requires tag or manual trigger)'
        type: boolean
        default: false

env:
  FORCE_COLOR: 3

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Build C++ components
      run: |
        uv run python -c "
        import subprocess, sys, os
        
        # Create build directory
        os.makedirs('build', exist_ok=True)
        os.chdir('build')
        
        # Configure
        subprocess.run([
            'cmake', '..',
            '-DCMAKE_BUILD_TYPE=Release',
            '-DBUILD_TESTS=ON',
            '-DBUILD_PYTHON_BINDINGS=ON'
        ], check=True)
        
        # Build
        import platform
        if platform.system() == 'Windows':
            subprocess.run(['cmake', '--build', '.', '--config', 'Release'], check=True)
        else:
            subprocess.run(['make', '-j4'], check=True)
        "

    - name: Run C++ tests
      run: |
        cd build
        if [ "$RUNNER_OS" = "Windows" ]; then
          ./Release/cmsketch_tests || ./cmsketch_tests
        else
          ./cmsketch_tests
        fi
      shell: bash

    - name: Run Python tests
      run: |
        uv run pytest pytests/ -v

    - name: Test package build
      run: |
        uv run python -m build --sdist
        # Quick test that we can import
        uv run python -c "import tempfile, subprocess, sys; 
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--find-links', 'dist', '--no-deps', 'cmsketch'], check=True);
        subprocess.run([sys.executable, '-c', 'import cmsketch; print(f\"Successfully imported cmsketch {cmsketch.__version__}\")'], check=True)"

  build-wheels:
    name: Build wheel for ${{ matrix.os }} - Python ${{ matrix.python-version }} (${{ matrix.arch }})
    needs: test
    if: >
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'workflow_dispatch' && inputs.build_wheels ||
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            python-version: '3.11'
            arch: x86_64
            platform_tag: linux_x86_64
          - os: ubuntu-22.04
            python-version: '3.12'
            arch: x86_64
            platform_tag: linux_x86_64

          # Windows builds
          - os: windows-2022
            python-version: '3.11'
            arch: AMD64
            platform_tag: win_amd64
          - os: windows-2022
            python-version: '3.12'
            arch: AMD64
            platform_tag: win_amd64

          # macOS Intel builds
          - os: macos-13
            python-version: '3.11'
            arch: x86_64
            platform_tag: macosx_10_15_x86_64
          - os: macos-13
            python-version: '3.12'
            arch: x86_64
            platform_tag: macosx_10_15_x86_64

          # macOS ARM builds
          - os: macos-14
            python-version: '3.11'
            arch: arm64
            platform_tag: macosx_11_0_arm64
          - os: macos-14
            python-version: '3.12'
            arch: arm64
            platform_tag: macosx_11_0_arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Install build dependencies
      run: |
        uv sync --dev
        uv add build wheel

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Configure build environment
      run: |
        echo "CMAKE_BUILD_TYPE=Release" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
      shell: bash

    - name: Build wheel
      run: |
        uv run python -m build --wheel
      env:
        CMAKE_ARGS: "-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17"

    - name: Test wheel
      run: |
        # Find and test wheel
        wheel=$(ls dist/*.whl | head -1)
        echo "Testing wheel: $wheel"
        
        # Install wheel
        python -m pip install --force-reinstall "$wheel"
        
        # Test import and basic functionality
        python -c "
        import cmsketch
        print(f'Successfully imported cmsketch {cmsketch.__version__}')
        sketch = cmsketch.CountMinSketch(width=1000, depth=5, seed=42)
        sketch.add('test')
        count = sketch.estimate('test')
        print(f'Count for test: {count}')
        assert count >= 1, 'Count should be at least 1'
        print('Basic functionality test passed!')
        "

    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.platform_tag }}-py${{ matrix.python-version }}
        path: dist/*.whl
        retention-days: 7

  upload-pypi:
    name: Upload to PyPI
    needs: build-wheels
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && inputs.upload_to_pypi)
    environment:
      name: pypi
      url: https://pypi.org/p/cmsketch
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheel-*
        merge-multiple: true
        path: dist/

    - name: List artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true

  create-release:
    name: Create GitHub Release
    needs: upload-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheel-*
        merge-multiple: true
        path: dist/

    - name: Get tag name
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        files: dist/*
        generate_release_notes: true
        body: |
          ## Changes
          
          See the [changelog](https://github.com/isaac-fei/count-min-sketch/commits/${{ steps.tag.outputs.tag }}) for detailed changes.
          
          ## Installation
          
          ```bash
          pip install cmsketch==${{ steps.tag.outputs.tag }}
          ```
          
          ## Wheels
          
          This release includes pre-built wheels for:
          - Linux (x86_64): Python 3.11, 3.12
          - Windows (AMD64): Python 3.11, 3.12  
          - macOS (Intel): Python 3.11, 3.12
          - macOS (Apple Silicon): Python 3.11, 3.12